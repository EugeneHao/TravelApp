img <- jpeg::readJPEG(files[i])
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
}
dev.off()
files <- files[paste0(basename((files))) != "showplot.JPG"]  # remove the show plot
height = ifelse(length(files) %% 3 ==0, length(files) %/% 3, length(files) %/% 3+1) *480
width = 1920
jpeg(paste(subpath, "showplot.JPG", sep = "/"), width = width, height = height)
filelist <- lapply(files, jpeg::readJPEG)
names(filelist) <- paste0(basename((files)))
list2env(filelist, envir=.GlobalEnv)
par(mar=rep(0,4))
layout(matrix(1:length(names(filelist)), ncol=3, byrow=TRUE))
for(i in 1:length(files)) {
img <- jpeg::readJPEG(files[i])
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
}
dev.off()
TripInfor
runApp('TravelApp.R')
path
TripInfor
AddTrip(TripInfor, "Salt Lake City", "2019Summer", save = T)
library(ggmap)
register_google("AIzaSyAw7BKFgBSM77LQ8yqp0edEZ76pcXMnk6I")
AddTrip(TripInfor, "Salt Lake City", "2019Summer", save = T)
path
combinepicture <- function(path)
{
sf_name <- list.files(path)
for(i in 1:length(sf_name))
{
subpath <- paste(path, sf_name[i], sep = "/")
files <- list.files(path= subpath, pattern="*.JPG", all.files=T, full.names=T)
if(files %>% length() > 0)
{
files <- files[paste0(basename((files))) != "showplot.JPG"]  # remove the show plot
height = ifelse(length(files) %% 3 ==0, length(files) %/% 3, length(files) %/% 3+1) *480
width = 1920
jpeg(paste(subpath, "showplot.JPG", sep = "/"), width = width, height = height)
filelist <- lapply(files, jpeg::readJPEG)
names(filelist) <- paste0(basename((files)))
list2env(filelist, envir=.GlobalEnv)
par(mar=rep(0,4))
layout(matrix(1:length(names(filelist)), ncol=3, byrow=TRUE))
for(i in 1:length(files)) {
img <- jpeg::readJPEG(files[i])
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
}
dev.off()
}
}
}
combinepicture(path)
i = 6
subpath <- paste(path, sf_name[i], sep = "/")
files <- list.files(path= subpath, pattern="*.JPG", all.files=T, full.names=T)
files
files <- files[paste0(basename((files))) != "showplot.JPG"]  # remove the show plot
height = ifelse(length(files) %% 3 ==0, length(files) %/% 3, length(files) %/% 3+1) *480
width = 1920
height
width
filelist <- lapply(files, jpeg::readJPEG)
names(filelist) <- paste0(basename((files)))
list2env(filelist, envir=.GlobalEnv)
par(mar=rep(0,4))
layout(matrix(1:length(names(filelist)), ncol=3, byrow=TRUE))
1:length(names(filelist)
)
filelist <- lapply(files, jpeg::readJPEG)
names(filelist) <- paste0(basename((files)))
list2env(filelist, envir=.GlobalEnv)
par(mar=rep(0,4))
layout(matrix(1:6, ncol=3, byrow=TRUE))
for(i in 1:length(files)) {
img <- jpeg::readJPEG(files[i])
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
}
hieght
height
i  =12
subpath <- paste(path, sf_name[i], sep = "/")
files <- list.files(path= subpath, pattern="*.JPG", all.files=T, full.names=T)
files
files <- c(list.files(path= subpath, pattern="*.JPG", all.files=T, full.names=T),
list.files(path= subpath, pattern="*.jpg", all.files=T, full.names=T))
files
files <- files[paste0(basename((files))) != "showplot.JPG"]  # remove the show plot
height = ifelse(length(files) %% 3 ==0, length(files) %/% 3, length(files) %/% 3+1) *480
width = 1920
filelist <- lapply(files, jpeg::readJPEG)
names(filelist) <- paste0(basename((files)))
list2env(filelist, envir=.GlobalEnv)
par(mar=rep(0,4))
layout(matrix(1: (height/480*3), ncol=3, byrow=TRUE))
for(i in 1:length(files)) {
img <- jpeg::readJPEG(files[i])
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
}
combinepicture(path = path)
#   path = "C:/Users/eugen/Dropbox/My/My App/TravelApp/www/photo"
combinepicture <- function(path)
{
sf_name <- list.files(path)
for(i in 1:length(sf_name))
{
subpath <- paste(path, sf_name[i], sep = "/")
files <- c(list.files(path= subpath, pattern="*.JPG", all.files=T, full.names=T),
list.files(path= subpath, pattern="*.jpg", all.files=T, full.names=T))
if(files %>% length() > 0)
{
files <- files[paste0(basename((files))) != "showplot.JPG"]  # remove the show plot
height = ifelse(length(files) %% 3 ==0, length(files) %/% 3, length(files) %/% 3+1) *480
width = 1920
jpeg(paste(subpath, "showplot.JPG", sep = "/"), width = width, height = height)
filelist <- lapply(files, jpeg::readJPEG)
names(filelist) <- paste0(basename((files)))
list2env(filelist, envir=.GlobalEnv)
par(mar=rep(0,4))
layout(matrix(1: (height/480*3), ncol=3, byrow=TRUE))
for(i in 1:length(files)) {
img <- jpeg::readJPEG(files[i])
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
}
dev.off()
}
}
}
combinepicture(path = path)
runApp('TravelApp.R')
library(shiny);library(shinycssloaders);library(shinydashboard);library(shinyWidgets)
library(plotly);library(DT)
library(leaflet);library(leaflet.extras)
library(dplyr);library(sp);library(rgdal)
#library(viscover)
runApp('TravelApp.R')
runApp('TravelApp.R')
setwd("C:/Users/eugen/Dropbox/My/My App/TravelApp/")
source("BaseFun.R")
TripInfor <- readRDS("TripInfor.rds")
RouteLine <- readRDS("RouteLine.rds")
NP <- read.csv("nps_parks.csv")
RouteLine
DrawRoute(NULL, RouteLine)
mapStates = map("state", fill = TRUE, plot = FALSE)
?map
runApp('TravelApp.R')
Route = RouteLine
mapStates = maps::map("state", fill = TRUE, plot = FALSE)
mymap <- leaflet(mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = T,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.2,
highlight = highlightOptions(
weight = 2,
color = "grey",
dashArray = "",
fillOpacity = 0),
label = mapStates$names,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "20px",
direction = "auto")) %>%
setView(-93.65, 42.0285, zoom = 3)
for(i in 1:length(Route))
{
mymap %>% addPolylines(lng = Route[[i]]$X, lat = Route[[i]]$Y, weight = 2.5) %>%
addCircleMarkers(lat = SplitTrip[[i]]$lat,
lng = SplitTrip[[i]]$lng,
popup = paste(SplitTrip[[i]]$travel, SplitTrip[[i]]$name, sep = "-"),
color = rainbow(7)[i%%7],
stroke = FALSE,
radius = 4,
fillOpacity = 0.8) -> mymap
}
runApp('TravelApp.R')
runApp('TravelApp.R')
library(shiny)
ui <- pageWithSidebar(
headerPanel("renderImage example"),
sidebarPanel(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000,  value = 500)
),
mainPanel(
# Use imageOutput to place the image on the page
imageOutput("myImage")
)
)
server <- function(input, output, session) {
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- tempfile(fileext = '.png')
# Generate the PNG
png(outfile, width = 400, height = 300)
hist(rnorm(input$obs), main = "Generated in renderImage()")
dev.off()
# Return a list containing the filename
list(src = outfile,
contentType = 'image/png',
width = 400,
height = 300,
alt = "This is alternate text")
}, deleteFile = TRUE)
}
shinyApp(ui, server)
?renderPlot
?plotlyOutput
?plot_ly
plot_path <- "C:/Users/eugen/Dropbox/My/My App/TravelApp/www/photo/"
plot_path <- "C:/Users/eugen/Dropbox/My/My App/TravelApp/www/photo"
loc = "Key West"
plot_ly() %>%
layout(
images = list(source = paste(plot_path, loc, "showplot.JPG", sep = "/"))
)
paste(plot_path, loc, "showplot.JPG", sep = "/")
# Demo of clicking, hovering, brushing with imageOutput
# Note that coordinates are in pixels
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
}
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
library(shiny)
library(shinyWidgets)
library(gridExtra)
library(png)
library(grid)
ui <- fluidPage(
titlePanel("Compare"),
sidebarLayout(
sidebarPanel(
pickerInput(inputId = "countyInput", label = "Filter county",
choices = c("County1", "County2", "County3", "County4", "County5"),
options = list(`actions-box` = TRUE,size = 10, `selected-text-format` = "count > 9"),
multiple = TRUE),
checkboxGroupInput(inputId = "reasonInput", label = "Filter reason",
choices = c("reason1", "reason2", "reason3"))
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
filename <- normalizePath(file.path("<path>", paste0(input$countyInput, " ", input$reasonInput, ".png", sep = ""))) # you had one extra space before .png
filename <- filename[file.exists(filename)]
pngs = lapply(filename, readPNG)
asGrobs = lapply(pngs, rasterGrob)
p <- grid.arrange(grobs=asGrobs, nrow = 1)
}, width = 1000)
}
shinyApp(ui = ui, server = server)
paste(plot_path, loc, "showplot.JPG", sep = "/")
oneplot = paste(plot_path, loc, "showplot.JPG", sep = "/")
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
img <- jpeg::readJPEG(oneplot)
#plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,1,1)
?rasterImage
plot(image)
#plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,3,3)
img <- jpeg::readJPEG(oneplot)
#plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,3,3)
#plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,0.5,0.5)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,0.5,0.5)
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0,0.5,0.5)
oneplot = paste(plot_path, loc, "showplot.JPG", sep = "/")
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
rasterImage(img,0,0, 1,1)
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n")
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0, 1,1)
rasterImage(img,-.2,-.2, 1,1)
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
plot_path
list.files(paste(plot_path, loc, sep = "/"))
runApp('TravelApp.R')
runApp('TravelApp.R')
tempfile(fileext = '.png')
tempfile(fileext = '.png')
?deleteFile
??deleteFile
runApp('TravelApp.R')
runApp('TravelApp.R')
oneplot = paste(plot_path, loc, "showplot.JPG", sep = "/")
filenum <- length(list.files(paste(plot_path, loc, sep = "/"))) -1
outfile <- tempfile(fileext = '.png')
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
dev.off()
outfile
filenum
oneplot = paste(plot_path, loc, "showplot.JPG", sep = "/")
filenum <- length(list.files(paste(plot_path, loc, sep = "/"))) -1
outfile <- tempfile(fileext = '.JPG')
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
dev.off()
outfile
oneplot = paste(plot_path, loc, "showplot.JPG", sep = "/")
filenum <- length(list.files(paste(plot_path, loc, sep = "/"))) -1
outfile <- tempfile(fileext = '.png')
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
dev.off()
outfile
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
dev.off()
png(img)
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
selectmarker$name
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
selectmarker <- data.frame(name = "Key West")
selectmarker
selectmarker$name <- 'gg'
selectmarker
point
TripInfor%>%head()
point = NP[1,]
point
point$lat = point$Latitude
point$lon = point$Longitude
TripInfor %>% filter(lng == point$lng, lat == point$lat)
mymarker <- NULL
if(sum(TripInfor$lat == point$lat * TripInfor$lng == point$lng ) > 0)
mymarker <- TripInfor %>% filter(lng == point$lng, lat == point$lat)
sum(TripInfor$lat == point$lat * TripInfor$lng == point$lng )
TripInfor$lat == point$lat
mymarker <- NULL
if(sum((TripInfor$lat == point$lat) * (TripInfor$lng == point$lng )) > 0)
mymarker <- TripInfor %>% filter(lng == point$lng, lat == point$lat)
mymarker
mymarker <- NULL
if(sum((TripInfor$lat == point$lat) * (TripInfor$lng == point$lng )) > 0)
mymarker <- TripInfor %>% filter(lng == point$lng, lat == point$lat)
selectmarker <- data.frame(name = "Key West")
if(is.null(mymarker) == F)
{
selectmarker$name <- mymarker$name
}
print(selectmarker)
selectmarker$name
runApp('TravelApp.R')
point = TripInfor[1,]
point <- input$TravelMap_marker_click
mymarker <- NULL
if(sum((TripInfor$lat == point$lat) * (TripInfor$lng == point$lng )) > 0)
mymarker <- TripInfor %>% filter(lng == point$lng, lat == point$lat)
selectmarker <- data.frame(name = "Key West")
if(is.null(mymarker) == F)
{
selectmarker$name <- mymarker$name
}
print(selectmarker)
selectmarker$name
runApp('TravelApp.R')
loc = "Key West"
oneplot = paste(plot_path, loc, "showplot.JPG", sep = "/")
oneplot
filenum <- length(list.files(paste(plot_path, loc, sep = "/"))) -1
outfile <- tempfile(fileext = '.png')
png(outfile, width = 400, height = 300)
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
outfile <- tempfile(fileext = '.JPG')
png(outfile, width = 400, height = 300)
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
dev.off()
list(src = outfile,
contentType = 'image/jpeg',
width = 400,
height = 300,
alt = "This is alternate text")
outfile <- tempfile(fileext = '.JPG')
png(outfile, width = 400, height = 300)
par(mfrow = c(1,1))
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
dev.off()
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
runApp('TravelApp.R')
img <- jpeg::readJPEG(oneplot)
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
oneplot
img <- jpeg::readJPEG(oneplot)
par(mfrow = c(1,1))
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
par(mfrow = c(1,1))
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
#  png(outfile, width = 400, height = 300)
img <- jpeg::readJPEG(oneplot)
list2env(filelist, envir=.GlobalEnv)
par(mfrow = c(1,1))
plot(NA,xlim=0:1,ylim=0:1,xaxt="n",yaxt="n",bty="n", xlab = "", ylab = "")
rasterImage(img,0,0,1,1)
plot(x = 1:10, y = 1:10)
